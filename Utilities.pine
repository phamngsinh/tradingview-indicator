// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© jmosullivan

//@version=5

// @description Utility functions for my indicators.
library("Utilities")

// @function Tradingview doesn't allow you to pull simple strings from arrays, so this function can be used to extract a simple string from a comma-delimited list.
// @param list (string) The comma-delimited list
// @param index (int) The index (zero-based) of the item to extract from the list
// @param default (string) The default value to return if the index is not in the string
// @param delimiter (string) The delimiter in the string (default is comma)
// @returns (string) The item from the comma-delimited list
export getItemFromList(string list, int index, string default = "", string delimiter = ",") =>
    startPos = 0
    listLen = str.length(list)
    endPos = str.pos(list, delimiter)
    iterator = -1
    endOfList = false
    while iterator < index and not endOfList
        iterator += 1
        if endPos == listLen
            endOfList := true
        else
            startPos := endPos+1
            endPos := str.pos(str.substring(list, startPos), delimiter)
            endPos := na(endPos) ? listLen : startPos + endPos
    
    iterator == index ? str.substring(list, startPos, endPos) : default

// @function Tradingview doesn't give you a nice way to put the line styles into a dropdown for configuration settings. So, I specify them in the following format: ["Solid", "Dashed", "Dotted", "None/Hidden"]. This function takes care of converting those custom strings back to the ones expected by tradingview scripts. 
// @param show (string) styleString
// @param acceptGivenIfNoMatch (bool) If no match for styleString is found and this is true, the function will return styleString, otherwise it will return tradingview's preferred default
// @returns (string) The string expected by tradingview functions
export getLineStyleFromString(string styleString, bool acceptGivenIfNoMatch = true) =>
    ret = switch styleString
        "Dotted" => line.style_dotted
        "Dashed" => line.style_dashed
        "Solid" => line.style_solid
        => acceptGivenIfNoMatch ? styleString : line.style_solid
    ret

// @function Tradingview doesn't give you a nice way to put the label styles into a dropdown for configuration settings. So, I specify them in the following format: ["Center", "Left", "Lower Left", "Lower Right", "Right", "Up", "Upper Left", "Upper Right", "Plain Text", "No Labels"]. This function takes care of converting those custom strings back to the ones expected by tradingview scripts. 
// @param show (string) styleString
// @param acceptGivenIfNoMatch (bool) If no match for styleString is found and this is true, the function will return styleString, otherwise it will return tradingview's preferred default
// @returns (string) The string expected by tradingview functions
export getLabelStyleFromString(string styleString, bool acceptGivenIfNoMatch = true) =>
    ret = switch styleString
        "Down" => label.style_label_down
        "Center" => label.style_label_center
        "Left" => label.style_label_left
        "Lower Left" => label.style_label_lower_left
        "Lower Right" => label.style_label_lower_right
        "Right" => label.style_label_right
        "Up" => label.style_label_up
        "Upper Left" => label.style_label_upper_left
        "Upper Right" => label.style_label_upper_right
        "Plain Text" => label.style_none
        => acceptGivenIfNoMatch ? styleString : label.style_label_down
    ret

// @function Create and return a label after the last bar. 
// @param show (bool) Should the label show or not?
// @param labelStyle (string) One of: label.style_label* or "transparent". If "transparent", textColor value will be inverted with the label color (and label color will become transparent).
// @param x (int) Bar index on the x-axis
// @param y (float) Price on the y-axis
// @param labelText (string) Label text
// @param textSize (string) One of size.* values
// @param labelColor (color) Color of the label background
// @param textColor (color) Color of the text within the label. Defaults to color.white.
export getLabel(int x, float y, string labelText, bool show = true, string labelStyle = label.style_label_left, string textSize = size.small, color labelColor = color.blue, color textColor = color.white, string xloc=xloc.bar_index) =>
    lbl = label(na)
    if (show and labelStyle != "No Labels")
        // May need to shuffle the colors around depending on the label style being rendered
        _labelColor = labelColor
        _textColor = textColor
        _labelStyle = getLabelStyleFromString(labelStyle)
        if (_labelStyle == "transparent")
            _labelStyle := label.style_none
            _labelColor := color.rgb(0,0,0,100) // Make the label background transparent
            _textColor := labelColor // Make the text the color of the label background

        lbl := label.new(x=x, y=y, xloc=xloc, text=labelText, style=_labelStyle, color=_labelColor, textcolor=_textColor, size=textSize, textalign=text.align_left)
    lbl


// @function Draw a label after the last bar. 
// @param show (bool) Should the label show or not?
// @param labelStyle (string) One of: label.style_label* or "transparent". If "transparent", textColor value will be inverted with the label color (and label color will become transparent).
// @param x (int) Bar index on the x-axis
// @param y (float) Price on the y-axis
// @param labelText (string) Label text
// @param textSize (string) One of size.* values
// @param labelColor (color) Color of the label background
// @param textColor (color) Color of the text within the label. Defaults to color.white.
export drawLabel(int x, float y, string labelText, bool show = true, string labelStyle = label.style_label_left, string textSize = size.small, color labelColor = color.blue, color textColor = color.white, string xloc=xloc.bar_index) =>
    var label lbl = na
    label.delete(lbl)
    lbl := getLabel(x=x, y=y, labelText=labelText, show=show, labelStyle=labelStyle, textSize=textSize, labelColor=labelColor, textColor=textColor, xloc=xloc)

// @function Draw a horizontal line.
// @param show (bool) Should the line and label show or not?
// @param x (int) Bar index on the x-axis
// @param y (float) Price on the y-axis
// @param lineStyle (string) One of line.style_*
// @param lineWidth (int) Width of the line
// @param lineColor (color) Color of the line
export drawLine(int x, float y, string lineStyle = line.style_solid, int lineWidth = 1, color lineColor = color.blue, bool show = true) =>
    var line ln = na
    line.delete(ln)
    if (show)
        ln := line.new(x1=x[1], x2=x, y1=y, y2=y, extend=extend.both, color=lineColor, style=getLineStyleFromString(lineStyle), width=lineWidth)

// @function Draw a horizontal line with a label after the last bar. 
// @param show (bool) Should the line and label show or not?
// @param labelStyle (string) One of: label.style_label*
// @param x (int) Bar index on the x-axis
// @param y (float) Price on the y-axis
// @param lineStyle (string) One of line.style_*
// @param lineWidth (int) Width of the line
// @param lineAndLabelColor (color) Color of the line and label
// @param labelText (string) Label text
// @param textSize (string) One of size.* values
// @param textColor (color) Color of the text within the label. Defaults to color.white. This value will be inverted with the label color (and label color will become transparent) if labelPosition is one of the "Text Above" options.
export drawLineAndLabel(int x, float y, string labelText, string labelStyle = label.style_label_left, string lineStyle = line.style_solid, int lineWidth = 1, color lineAndLabelColor = color.blue, string textSize = size.small, color textColor = color.white, bool show = true) =>
    drawLine(show=show, x=x, y=y, lineStyle=lineStyle, lineWidth=lineWidth, lineColor=lineAndLabelColor)
    drawLabel(show=show, labelStyle=labelStyle, x=x, y=y, labelText=labelText, textSize=textSize, labelColor=lineAndLabelColor, textColor=textColor)

// @function Write a debug message to the screen after the last candle
// @param txt (string) the message to write
export debug(string txt) =>
    drawLabel(show=true, labelStyle=label.style_label_left, x=bar_index + 3, y=ta.highest(10)[1], labelText=txt, textSize=size.normal, labelColor=color.blue, textColor=color.white)

// @function Convenience function. I found that if I assigned a built-in series to a variable in the function scope, it didn't retain it's history. This function allows me to work around that.
// @param direction (string) "Up" or "Down"
// @param index (int) The index in the series to return 
// @returns (float) The high or low value
getHistoryValue(string direction, int index) =>
    ret = direction == 'Up' ? low[index] : high[index]
    ret

// @function Return a color with a transparency on it
// @param color (color) The color to make transparent
// @param transparency (int) The transparency value
// @returns (color) the color with transparency applied
export getTransparentColor(color color, int transparency) =>
   color.rgb(color.r(color), color.g(color), color.b(color), transparency)

// @function Determines if the current candle is going in the specified direction.
// @param direction (string) "Up" or "Down"
// @param index (int) The index in the series to check
// @returns (bool) True or false
export isLastCandleGoingInDirection(string direction, int index) =>
    movingInDirection = (direction == 'Up' and getHistoryValue(direction, index+1) <= getHistoryValue(direction, index)) or (direction == 'Down' and getHistoryValue(direction, index+1) >= getHistoryValue(direction, index))
    movingInDirection

// @function Determine if a stairstep is occurring within a specified # of candles. 
// @param direction (string) "Up" or "Down"
// @param length (int) The number of candles to check back from the current candle
// @returns (int) 0 if not stairstepping, -1 if a stairstep has just broken, 1+ indicates the number of candles it has been stairstepping for
export getStairstep(string direction, int length) => 
    breaking = isLastCandleGoingInDirection(direction, 0) ? false : true

    steps = 1
    curr = false
    i = steps
    while isLastCandleGoingInDirection(direction, i) and i < 40
        i := i + 1
        steps := steps + 1

    trending = steps >= length - 1
    ret = trending ? breaking ? -1 : steps + 1 : 0
    ret

// @function Gets the number of inside bars for the current chart. Can also be passed to request.security to get the same for different timeframes.
// @returns (int) The # of inside bars on the chart right now.
export getInsideBarCount() => 
    ibCount = 0
    i = 0
    maxLoops = 10
    while i <= maxLoops
        if (high[i+1] > high[i] and low[i+1] < low[i])
            ibCount := ibCount + 1
            i := i + 1
        else
            i := maxLoops + 1

    ibCount

// @function Given a start and end time, returns the high or low price during that time window.
// @param highOrLow A string "high" or "low" specifying which value you are looking for
// @param start The timestamp to start with (# of seconds)
// @param end The timestamp to end with (# of seconds)
// @returns (float) The high or low value
export getLevelBetweenTimes(string highOrLow, int start, int end) =>
    // ref: https://www.pinecoders.com/faq_and_code/
    var float ret = highOrLow == 'high' ? 0. : 10e10
    var reset = true
    minNow = (hour * 60) + minute
    if minNow >= start and minNow <= end
        if reset
            ret := highOrLow == 'high' ? high : low
            reset := false
        else
            ret := highOrLow == 'high' ? math.max(ret, high) : math.min(ret, low)
    else
        reset := true
    ret

// @function Given a start and end time, returns the sum of all volume across bars during that time window.
// @param start The timestamp to start with (# of seconds)
// @param end The timestamp to end with (# of seconds)
// @returns (float) The volume
export getVolumeBetweenTimes(int start, int end) =>
    var float vol = 0
    var reset = true
    minNow = (hour * 60) + minute
    if minNow >= start and minNow <= end
        if reset
            vol := volume
            reset := false
        else
            vol += volume
    else
        reset := true
    vol

// @function Get the timeframe of the current chart
// @returns (string) The string of the current chart timeframe
export timeframeOfChart() =>
    string rtf = str.tostring(timeframe.multiplier)
    if (timeframe.isseconds)
        rtf := rtf + "s"
    if (timeframe.isdaily)
        rtf := rtf + "d"
    if (timeframe.isweekly)
        rtf := rtf + "w"
    if (timeframe.ismonthly)
        rtf := rtf + "m"
    rtf

// @function Convert a timeframe string to a consistent standard.
// @param tf (string) The timeframe string to convert
// @returns (string) The standard format for the string, or the unchanged value if it is unknown.
export timeframeToString(string tf) =>
    string rtf = switch tf
    	"1" => "1m"
    	"2" => "2m"
    	"3" => "3m"
    	"5" => "5m"
    	"13" => "13m"
    	"15" => "15m"
    	"30" => "30m"
    	"45" => "45m"
    	"60" => "1h"
    	"120" => "2h"
    	"180" => "3h"
    	"240" => "4h"
    	"360" => "6h"
    	"480" => "8h"
    	"720" => "12h"
    	"D" => "1D"
    	"W" => "1W"
    	"M" => "1M"
    	=> tf // default
    rtf

// @function Get the # of seconds in a given timeframe. Tradingview's timeframe.in_seconds() expects a simple string, and we often need to use series string, so this is an alternative to get you the value you need.
// @param tf timeframe
// @returns (int) The number of secondsof that timeframe
export timeframeInSeconds(string timeframe) =>
    sMinute = 60
    sHour = sMinute * 60
    sDay = sHour * 24
    sWeek = sDay * 7
    sMonth = timeframe.in_seconds("M") // TV has a weird value for this, so I'm just using theirs
    letter = str.substring(timeframe, str.length(timeframe) - 1)
    multiplier = switch letter
        "M" => sMonth
        "W" => sWeek
        "D" => sDay
        "H" => sHour
        => sMinute

    number = int(str.tonumber(timeframe))
    increment = na(number) ? 1 : number
    increment * multiplier

// @function Pads a label string so that it appears properly in or not in a label. When label.style_none is used, this will make sure it is left-aligned instead of center-aligned. When any other type is used, it adds a single space to the right so there is padding against the right end of the label.
// @param labelText (string) The string to be padded
// @param labelStyle (string) The style of the label being padded for.
// @returns (string) The padded string
export padLabelString(string labelText, string labelStyle) =>
    SPACE = "â"
    returnString = labelText
    _labelStyle = getLabelStyleFromString(labelStyle)
    if _labelStyle == label.style_none
        for i = 0 to str.length(labelText)
            returnString := SPACE + returnString
    else
        returnString := returnString + SPACE

    returnString