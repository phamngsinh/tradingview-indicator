// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© jmosullivan

//@version=5

// @description Library of functions related to technical analysis. Specifically, capturing price pivots into matrix tables for analysis and visualizations.
library("PrivateTA", overlay=true)

// @function returns an array representing the timeframes we typically get pivots for
// @returns array<string> The string array of timeframes.
export getPivotTimeframes() =>
    array.from("5", "15", "60", "240", "D", "W", "M")

// @function Gets the "friendly" English version of a timeframe.period string.
// @param timeframe (string) The timeframe to translate.
// @returns (string) The "friendly" English version of the timeframe string, or the string itself if no match was found.
export getTimeframeEnglish(string timeframe) =>
    var timeframeArray = getPivotTimeframes()
    var timeframeEnglishArray = array.from("5m", "15m", "1h", "4h", "Daily", "Weekly", "Monthly")
    ix = array.indexof(timeframeArray, timeframe)
    ix > -1 ? array.get(timeframeEnglishArray, ix) : timeframe

// @function Calls ta.pivothigh with look as both left and right.
// @param look (int) The value to use for both left and right.
// @returns ta.pivothigh(look, look)
export pivotHigh(int look) =>
    ta.pivothigh(look, look)

// @function Calls ta.pivotlow with look as both left and right.
// @param look (int) The value to use for both left and right.
// @returns ta.pivotlow(look, look)
export pivotLow(int look) =>
    ta.pivotlow(look, look)

// @function Returns a float value representing a trend pattern formed by pivots. Useful for storing trend patterns alongside prices in matrixes.
// @param trend (string) The plain english name of the trend pattern.
// @returns (float) The number representing that pattern.
export trendToNumber(string trend) =>
    switch trend
        "Up" => 1
        "Down" => 2
        "Megaphone" => 3
        "Consolidating" => 4
        "Trend Change Bull" => 5
        "Trend Change Bear" => 6
        "Continuation Bull" => 7
        "Continuation Bear" => 8
        => -1

// @function Returns a string value representing a trend pattern formed by pivots. Useful for converting stored trend patterns alongside prices in matrixes into English.
// @param trend (float) The number representing the trend pattern.
// @returns (string) The English name of the pattern represented by the provided float.
export trendToString(float trend) =>
    switch trend
        1 => "Up"
        2 => "Down"
        3 => "Megaphone"
        4 => "Consolidating"
        5 => "Trend Change Bull"
        6 => "Trend Change Bear"
        7 => "Continuation Bull"
        8 => "Continuation Bear"
        => "Unknown"

// @function When referencing a matrix of pivot details, this helps by returning the column index where named pivot values are stored.
// @param columnName (string) The plain english name of the column index to reference.
// @returns (float) The number representing that column index or -1 if not found.
export getPivotDetailColumnIndex(string columnName) =>
    int ix = switch columnName
        "pivotPrice" => 0       // The price level (float)
        "pivotTime" => 1        // The time of the bar
        "pivotType" => 2        // The pivot type: high (1) or low (0)
        "isHigher" => 3         // isHigher (1) or isLower (0) (this and PivotType make "Higher High", "Lower High", etc)
        "priceDistance" => 4    // priceDistance: the full price-distance of the move from the previous level to this level
        "distanceMA" => 5       // 20period moving average of priceDistance for this pivot type (high or low)
        "percentInRange" => 6   // Percent this move is in the prior range (the fib level pull)
        "trend" => 7            // The current Trend
        "trendCount" => 8       // The count of the # of times that this trend has happened consecutively
        => -1
    ix

// @function Returns the specified row and column from the provided matrix.
// @param matrix (matrix) The matrix containing the data to be retrieved.
// @param row (int) The row index to reference.
// @param columnName (string) The name of the column to reference.
// @returns (float) The value from the row/column pair.
export matrixGet(matrix<float> matrix, int row, string columnName) =>
    matrix.get(matrix, row, getPivotDetailColumnIndex(columnName))

// @function Pivots from request.security don't have accurate times on lower timeframes. This looks through the current chart's matrix for the correct time for that pivot.
// @param timeframe (string) The timeframe of the sourceMatrix.
// @param sourceMatrix (matrix) The matrix containing the inaccurate pivot time.
// @param chartMatrix (matrix) The matrix of the current chart, which contains the accurate pivot time.
// @param row (int) The row to reference in sourceMatrix.
// @returns (int) The accurate time for the pivot.
export matrixGetPivotTime(string timeframe, matrix<float> sourceMatrix, matrix<float> chartMatrix, int row) =>
    matchTime = float(na)
    sourcePivotTime = matrixGet(sourceMatrix, row, 'pivotTime')
    if timeframe.period != timeframe
        sourcePivotPrice = matrixGet(sourceMatrix, row, 'pivotPrice')
        sourcePivotType = matrixGet(sourceMatrix, row, 'pivotType')
        chartPivotRows = matrix.rows(chartMatrix)
        i = chartPivotRows - 1
        while i > 0 and na(matchTime)
            chartPivotPrice = matrixGet(chartMatrix, i, 'pivotPrice')
            chartPivotTime = matrixGet(chartMatrix, i, 'pivotTime')
            chartPivotType = matrixGet(chartMatrix, i, 'pivotType')
            if (chartPivotType == sourcePivotType and chartPivotPrice == sourcePivotPrice and chartPivotTime <= sourcePivotTime)
                matchTime := chartPivotTime

            i -= 1
	
    na(matchTime) ? sourcePivotTime : matchTime

// @function Sets the specified row and column value in the provided matrix.
// @param matrix (matrix) The matrix containing the data to be retrieved.
// @param row (int) The row index to reference.
// @param columnName (string) The name of the column to reference.
// @param value (float) The value to set.
export matrixSet(matrix<float> matrix, int row, string columnName, float value) =>
    matrix.set(matrix, row, getPivotDetailColumnIndex(columnName), value)

// @function Gets the moving average of a column.
// @param matrix (matrix) The matrix containing the data to be evaluated.
// @param columnName (string) The name of the column to get the moving average for. Defaults to "priceDistance".
// @param pivotType (float) The type of pivot (up/1 or down/0) to filter the moving average to. Defaults to -1, no filtering. 1 would filter to column pivotType 1 (up), 2 (down).
// @param pivotIndex (int) The row index to begin recording moving averages from. Defaults to the last row.
// @param length (int) The # of rows to look back and sum/average.
// @returns (float) The moving average of columnName.
export getDistanceMa(matrix<float> matrix, string columnName = "priceDistance", float pivotType = -1, int pivotIndex = -1, int length = 20) =>
    ma = float(na)
    sum = float(0)
    count = int(0)
    matrixRows = pivotIndex == -1 ? matrix.rows(matrix) : pivotIndex
    start = matrixRows - length * 2
    if (start >= 0)
        for i = start to matrixRows - 1
            if matrixGet(matrix, i, "pivotType") == pivotType
                sum += matrixGet(matrix, i, columnName)
                count += 1
    
        ma := sum / count
    ma

// @function Gets the trend pattern of the last 4 pivots
// @param pivotMatrix (matrix) The matrix containing the data to be evaluated.
// @param startIndex (int) The row index to begin evaluating from. Defaults to the last index.
// @returns (string) The trend pattern found, one of: Up, Down, Megaphone, Consolidating.
export getTrend(matrix<float> pivotMatrix, int startIndex = -1) =>
    trend = trendToNumber("Unknown")
    isHigher = 0 // Lower
    pivotRows = matrix.rows(pivotMatrix)
    _startIndex = startIndex == -1 ? pivotRows-1 : startIndex
    if (_startIndex > 3)
        pivot1Type = matrixGet(pivotMatrix, _startIndex, "pivotType")
        pivot1 = matrixGet(pivotMatrix, _startIndex, "pivotPrice")
        pivot2 = matrixGet(pivotMatrix, _startIndex-1, "pivotPrice")
        pivot3 = matrixGet(pivotMatrix, _startIndex-2, "pivotPrice")
        pivot4 = matrixGet(pivotMatrix, _startIndex-3, "pivotPrice")

        isHigher := pivot1 > pivot3 ? 1 : 0
        isHigherLow = bool(na)
        isHigherHigh = bool(na)
        // If pivot1 is a high...
        if (pivot1Type == 1)
            isHigherLow := pivot2 > pivot4
            isHigherHigh := pivot1 > pivot3
        else
            isHigherLow := pivot1 > pivot3
            isHigherHigh := pivot2 > pivot4

        if isHigherLow and isHigherHigh
            trend := trendToNumber("Up")
        else if not isHigherLow and not isHigherHigh
            trend := trendToNumber("Down")
        else if not isHigherLow and isHigherHigh
            trend := trendToNumber("Megaphone")
        else if isHigherLow and not isHigherHigh
            trend := trendToNumber("Consolidating")
    [isHigher, trend]

// @function Defines additional pivot values defined in getPivotDetailColumnIndex beyond the first three.
// @param pivotMatrix (matrix) The matrix containing the data to be evaluated.
// @param pivotIndex (int) The row index to evaluate.
export processPivotDetail(matrix<float> pivotMatrix, int pivotIndex) =>
    // pivotMatrix columns are defined in getPivotDetailColumnIndex() 
    matrixRows = matrix.rows(pivotMatrix)
    pivot = matrixGet(pivotMatrix, pivotIndex, "pivotPrice")
    pivotType = matrixGet(pivotMatrix, pivotIndex, "pivotType")
    priceDistance = float(na)
    percentInRange = float(na)
    // If there is at least one other pivot recorded, begin saving additional data
    if (pivotIndex > 0)
        pivot2 = matrixGet(pivotMatrix, pivotIndex-1, "pivotPrice")
        priceDistance := math.abs(pivot - pivot2)
        matrixSet(pivotMatrix, pivotIndex, "priceDistance", priceDistance) // 4: priceDistance: the full price-distance of the move from the previous level to this level
    if (pivotIndex >= 40)
        matrixSet(pivotMatrix, pivotIndex, "distanceMA", getDistanceMa(pivotMatrix, "priceDistance", pivotType, pivotIndex)) // 5: 20period moving average of priceDistance for this pivot type (high or low)
    if (pivotIndex > 1)
        lastPriceDistance = matrixGet(pivotMatrix, pivotIndex-1, "priceDistance")
        percentInRange := priceDistance * 100 / lastPriceDistance
        matrixSet(pivotMatrix, pivotIndex, "percentInRange", percentInRange) // 6: Percent this move is in the prior range (the fib level pull)
    if (pivotIndex > 2)
        [isHigher, trend] = getTrend(pivotMatrix)
        matrixSet(pivotMatrix, pivotIndex, "trend", trend) // 7: The current Trend
        lastTrend = matrixGet(pivotMatrix, pivotIndex-1, "trend")
        lastTrendCount = matrixGet(pivotMatrix, pivotIndex-1, "trendCount")
        trendCount = trend == lastTrend ? lastTrendCount + 1 : 0
        matrixSet(pivotMatrix, pivotIndex, "trendCount", trendCount) // 8: The count of the # of times that this trend has happened consecutively
        matrixSet(pivotMatrix, pivotIndex, "isHigher", isHigher)

// @function Processes pivots bar-by-bar and places them into a float matrix. This takes care of ensuring alternating between pivot highs and lows (no highs followed by lower/higher highs, it chooses the higher. Same for lower - chooses the lower).
// @param pivotMatrix (matrix) The matrix in which to store the pivotcontaining the inaccurate pivot time.
// @param pivot (float) The pivot value returned by ta.pivothigh or ta.pivotlow.
// @param pivotType (string) "High" or "Low".
// @param lookDistance (int) The value used for left/right in ta.pivothigh/ta.pivotlow.
// @param maxRows (int) The max number of rows to store in the matrix. Default is 40 (allows a 20p moving average of highs or lows)
export processPivot(matrix<float> pivotMatrix, float pivot, string pivotType, int lookDistance, int maxRows = 40) =>
    matrixRows = matrix.rows(pivotMatrix)
    if not na(pivot)
        lastPivot = matrixRows > 0 ? matrixGet(pivotMatrix, matrixRows - 1, "pivotPrice") : float(na)
        lastPivot2 = matrixRows > 1 ? matrixGet(pivotMatrix, matrixRows - 2, "pivotPrice") : float(na)
        lastPivotOfTypeMatches = pivot == nz(lastPivot2)
        lastPivotTypeWasFloat = matrixRows > 0 ? matrixGet(pivotMatrix, matrixRows - 1, "pivotType") : float(na)
        lastPivotTypeWas = na(lastPivotTypeWasFloat) ? string(na) : lastPivotTypeWasFloat == 1 ? "High" : "Low"
        // If the last pivot was the same type as the current one, update the pivot
        if (lastPivotTypeWas == pivotType)
            // If the last pivot was a high and this one is also high, use the higher one
            // OR if the last pivot was a low and this one is also a low, use the lower one
            // Disregard the pivot otherwise
            if (lastPivotTypeWas == "High" and pivot > lastPivot) or (lastPivotTypeWas == "Low" and pivot < lastPivot)
                pivotTime = time[lookDistance] // getCorrectPivotTime(pivot, pivotType, lookDistance, timeframe)
                matrixSet(pivotMatrix, matrixRows - 1, "pivotPrice", pivot)
                matrixSet(pivotMatrix, matrixRows - 1, "pivotTime", pivotTime)
                processPivotDetail(pivotMatrix, matrixRows - 1)
        else if not lastPivotOfTypeMatches
            // pivotMatrix will contain the columns defined in getPivotDetailColumnIndex()
            matrix.add_row(pivotMatrix, matrixRows, 
              array.from(
               pivot, // 0: The price level (float)
               time[lookDistance], // getCorrectPivotTime(pivot, pivotType, lookDistance, timeframe),
               pivotType == "High" ? 1 : 0, // 2: The pivot type: high (1) or low (0)
               float(na), // 3: isHigher (1) or isLower (0)
               float(na), // 4: priceDistance: the full price-distance of the move from the previous level to this level
               float(na), // 5: 20period moving average of priceDistance for this pivot type (high or low)
               float(na), // 6: Percent this move is in the prior range (the fib level pull)
               float(na), // 7: The current Trend
               0 // 8: The count of the # of times that this trend has happened consecutively
              ))

            // Don't let there be more than maxRows pivots per table (memory hog)
            if matrixRows + 1 > maxRows
                matrix.remove_row(pivotMatrix, 0)
                matrixRows -= 1

            processPivotDetail(pivotMatrix, matrixRows)

// @function Draws the lines in the pivot matrix.
// @param sourceMatrix (matrix) The matrix containing inaccurate pivot times to draw lines for
// @param chartMatrix (matrix) The matrix containing the accurate pivot times. This is typically the matrix of the currently viewed chart.
// @param lineCollection (array<line>) Lines created for render will be added to this array (for cleanup by outside functions if necessary).
// @param color (color) Color of the lines. Defaults to color.blue.
// @param style (string) The line style. Defaults to line.style_solid.
// @param width (int) The width of the lines. Defaults to 1.
// @param maxLines (int) The maximum number of lines to draw. Default to 40. If there are more lines, it will render the last 40 lines. 
export drawPivotLines(string timeframe, matrix<float> sourceMatrix, matrix<float> chartMatrix, array<line> lineCollection, color color=color.blue, string style=line.style_solid, int width=1, int maxLines = 40) =>
    if (barstate.islast)
        rows = matrix.rows(sourceMatrix)
        if (rows > 2)
            lastPivotPrice = float(na)
            lastPivotTime = float(na)
            pivotPrice = float(na)
            pivotTime = float(na)
            end = rows - 1
            start = end > maxLines ? end - maxLines : 0            
            for i = start to end
                // Define the values for drawing
                lastPivotPrice := matrixGet(sourceMatrix, i-1, "pivotPrice")
                lastPivotTime := matrixGetPivotTime(timeframe, sourceMatrix, chartMatrix, i-1)
                pivotPrice := matrixGet(sourceMatrix, i, "pivotPrice")
                pivotTime := matrixGetPivotTime(timeframe, sourceMatrix, chartMatrix, i)

                array.push(lineCollection, line.new(
                   xloc=xloc.bar_time,
                   x1=math.round(lastPivotTime), 
                   y1=lastPivotPrice, 
                   x2=math.round(pivotTime),
                   y2=pivotPrice, 
                   color=color,
                   style=style, 
                   width=width
                   ))

// @function Draws the pivot labels from the pivot matrix.
// @param timeframe (string) the timeframe of the source matrix.
// @param sourceMatrix (matrix) The matrix containing inaccurate pivot times to draw labels for.
// @param chartMatrix (matrix) The matrix containing the accurate pivot times. This is typically the matrix of the currently viewed chart.
// @param labelCollection (array<line>) Labels created for render will be added to this array (for cleanup by outside functions if necessary).
// @param labelColor (color) Color of the labels. Defaults to color.blue.
// @param textColor (color) Color of the text on labels. Defaults to color.white.
// @param maxLabels (int) The maximum number of labels to draw. Default to 4. 
export drawPivotLabels(string timeframe, matrix<float> sourceMatrix, matrix<float> chartMatrix, array<label> labelCollection, color labelColor=color.blue, color textColor=color.white, int maxLabels=4) =>
    if (barstate.islast)
        rows = matrix.rows(sourceMatrix)
        if (rows > 0)
            pivotPrice = float(na)
            pivotTime = float(na)
            pivotType = float(na)
            end = rows - 1
            start = end > maxLabels ? end - maxLabels : 0
            for i = end to start
                // Define the values for drawing
                pivotPrice := matrixGet(sourceMatrix, i, "pivotPrice")
                pivotTime := matrixGetPivotTime(timeframe, sourceMatrix, chartMatrix, i)
                pivotType := matrixGet(sourceMatrix, i, "pivotType")

                array.push(labelCollection, label.new(
                   text=str.tostring(pivotPrice, format.mintick),
                   style=(pivotType == 1 ? label.style_label_lower_left : label.style_label_upper_left),
                   xloc=xloc.bar_time,
                   x=math.round(pivotTime), 
                   y=pivotPrice, 
                   color=labelColor,
                   textcolor=textColor
                   ))

// @function Draws the areas between the highs and lows in the provided pivot matrix.
// @param sourceMatrix (matrix) The matrix containing inaccurate pivot times to draw areas for.
// @param chartMatrix (matrix) The matrix containing the accurate pivot times. This is typically the matrix of the currently viewed chart.
// @param lineCollection (array<line>) Lines created for render will be added to this array (for cleanup by outside functions if necessary).
// @param linefillCollection (array<linefill>) Linefills created for render will be added to this array (for cleanup by outside functions if necessary).
// @param color (color) Color of the lines. Defaults to color.blue.
// @param style (string) The line style. Defaults to line.style_solid.
// @param width (int) The width of the lines. Defaults to 1.
// @param maxAreas (int) The maximum number of areas to draw. Default to 12. If there are more areas, it will render the last 12 areas. 
export drawPivotAreas(string timeframe, matrix<float> sourceMatrix, matrix<float> chartMatrix, array<line> lineCollection, array<linefill> linefillCollection, color color, string style=line.style_solid, int width=1, int maxAreas = 12) =>
    if (barstate.islast)
        pivotRows = matrix.rows(sourceMatrix)
        if (pivotRows > 3)
            areaCount = 0
            pivot1 = float(na)
            pivot2 = float(na)
            pivot3 = float(na)
            pivot4 = float(na)
            pivotTime1 = float(na)
            pivotTime2 = float(na)
            pivotTime3 = float(na)
            pivotTime4 = float(na)
            i = pivotRows - 1
            while i > 3 and areaCount <= maxAreas
                // Define the values for drawing
                pivotIndex = getPivotDetailColumnIndex("pivotPrice")
                pivot1 := matrix.get(sourceMatrix, i, pivotIndex)
                pivot2 := matrix.get(sourceMatrix, i-1, pivotIndex)
                pivot3 := matrix.get(sourceMatrix, i-2, pivotIndex)
                pivot4 := matrix.get(sourceMatrix, i-3, pivotIndex)
                pivotTime1 := matrixGetPivotTime(timeframe, sourceMatrix, chartMatrix, i)
                pivotTime2 := matrixGetPivotTime(timeframe, sourceMatrix, chartMatrix, i-1)
                pivotTime3 := matrixGetPivotTime(timeframe, sourceMatrix, chartMatrix, i-2)
                pivotTime4 := matrixGetPivotTime(timeframe, sourceMatrix, chartMatrix, i-3)

                i := i - 2

                line1 = line.new(
                  xloc=xloc.bar_time,
                  x1=math.round(pivotTime1), 
                  y1=pivot1, 
                  x2=math.round(pivotTime3),
                  y2=pivot3, 
                  color=color,
                  style=style, 
                  width=width
                  )
                line2 = line.new(
                  xloc=xloc.bar_time,
                  x1=math.round(pivotTime2), 
                  y1=pivot2, 
                  x2=math.round(pivotTime4),
                  y2=pivot4, 
                  color=color,
                  style=style, 
                  width=width
                  )
                fillColor = color.new(color, 80)
                array.push(linefillCollection, linefill.new(line1, line2, fillColor))
                array.push(lineCollection, line1)
                array.push(lineCollection, line2)
                areaCount += 1

// End of exported functions

// Beginning logic to demonstrate library:
// (Copy the lines below to a new indicator to get started with this library)

lookback = input.int(5, "Lookback Value")

var timeframeArray = getPivotTimeframes()
var pivot5mMatrix = matrix.new<float>()
var pivot15mMatrix = matrix.new<float>()
var pivot1hMatrix = matrix.new<float>()
var pivot4hMatrix = matrix.new<float>()
var pivot1dMatrix = matrix.new<float>()
var pivot1wMatrix = matrix.new<float>()
var pivot1MMatrix = matrix.new<float>()

var lineArray = array.new<line>()

cleanup() =>
    lineCount = array.size(lineArray)
    if (lineCount > 0)
        for i = 0 to lineCount - 1
            line.delete(array.get(lineArray, i))

getMatrixByTimeframe(tf) =>
    switch tf
        "5" => pivot5mMatrix
        "15" => pivot15mMatrix
        "60" => pivot1hMatrix
        "240" => pivot4hMatrix
        "D" => pivot1dMatrix
        "W" => pivot1wMatrix
        "M" => pivot1MMatrix
        => matrix.new<float>()

requestSecurity(timeframe, expression) =>
    request.security(syminfo.tickerid, timeframe, expression)

definePivotsByTimeframe(timeframe) =>
    // For larger timeframes, save fewer pivots
    // This is done so that smaller timeframe pivots drawn on the chart will fill up the larger ones
    maxRows = 400
    tfIndex = array.indexof(timeframeArray, timeframe)
    maxRows := maxRows / (tfIndex+1)
    lookbackBars = lookback // 10 // Look back the equivalent of 3 bars on the requested timeframe
    pivotMatrix = getMatrixByTimeframe(timeframe)
    pivotHigh = float(na)
    pivotLow = float(na)

    if (timeframe == "5")
        pivotHigh := requestSecurity("5", pivotHigh(lookbackBars))
        pivotLow := requestSecurity("5", pivotLow(lookbackBars))
    if (timeframe == "15")
        pivotHigh := requestSecurity("15", pivotHigh(lookbackBars))
        pivotLow := requestSecurity("15", pivotLow(lookbackBars))
    if (timeframe == "60")
        pivotHigh := requestSecurity("60", pivotHigh(lookbackBars))
        pivotLow := requestSecurity("60", pivotLow(lookbackBars))
    if (timeframe == "240")
        pivotHigh := requestSecurity("240", pivotHigh(lookbackBars))
        pivotLow := requestSecurity("240", pivotLow(lookbackBars))
    if (timeframe == "D")
        pivotHigh := requestSecurity("D", pivotHigh(lookbackBars))
        pivotLow := requestSecurity("D", pivotLow(lookbackBars))
    if (timeframe == "W")
        pivotHigh := requestSecurity("W", pivotHigh(lookbackBars))
        pivotLow := requestSecurity("W", pivotLow(lookbackBars))
    if (timeframe == "M")
        pivotHigh := requestSecurity("M", pivotHigh(lookbackBars))
        pivotLow := requestSecurity("M", pivotLow(lookbackBars))

    processPivot(pivotMatrix, pivotHigh, "High", lookbackBars, maxRows=maxRows)
    processPivot(pivotMatrix, pivotLow, "Low", lookbackBars, maxRows=maxRows)

// And finally, here is the code that kicks it all off			
tfIndex = array.indexof(timeframeArray, timeframe.period)
if (tfIndex >= 0)
    // Cleanup first (in case we are loading real-time data)
    cleanup()

    timeframeCount = array.size(timeframeArray)
    start = tfIndex
    end = timeframeCount - 1
    colors = array.from(color.blue, color.orange, color.red, color.black)
    x = 0
    maxLines = 24
    for i = start to end
        timeframe = array.get(timeframeArray, i)
        definePivotsByTimeframe(timeframe)
        // if timeframe == "60"
        if x < 3
            pColor = array.get(colors, x)
            pivotMatrix = getMatrixByTimeframe(timeframe)
            chartMatrix = getMatrixByTimeframe(timeframe.period)
            drawPivotLines(timeframe, pivotMatrix, chartMatrix, lineArray, color=pColor, width=x+1, maxLines=maxLines)

        maxLines := maxLines / 2
        x += 1