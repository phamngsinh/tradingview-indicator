// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © jmosullivan
// @version=5

indicator(title='Stairstep', shorttitle="SS", overlay=true)
import jmosullivan/Utilities/16

minCandles = input.int(5, 'Minimum Consecutive Candles', 3, 10, 1, tooltip="The minimum number of consecutive candles that represent a stairstep pattern.")
textSize = input.string(defval=size.small, title="Text Size",  options=[size.tiny, size.small, size.normal])
textType = input.string(defval="Words", title="Label Text", options=["Words", "Abbreviations"], tooltip="Show full words (Stairstep, Inside Bar) on the label, or abbreviations (SS, IB)")
showNumbers = input.bool(defval=true, title="Show # of Stairsteps")
stairstepLabelColor = input.color(color.rgb(232, 24, 170), 'Label', inline="1")
stairstepTextColor = input.color(color.white, 'Text', inline="1")
insideBarTextColor = input.color(color.yellow, 'IB Text', 'Colors of the label/text when stairstepping', inline="1")
breakLabelColor = input.color(color.rgb(1, 95, 35), 'Break Label', inline="2")
breakTextColor = input.color(color.rgb(96, 245, 0), 'Text', 'Colors of the label/text when stairstep breaks', inline="2")

doLabel(direction, len) =>
    if (barstate.islast)
        ss = Utilities.getStairstep(direction, len)
        ssBreak = ss == -1
        yloc = ssBreak ? direction == 'Down' ? high[1] : low[1] : close
        // is_ib = high <= high[1] and low >= low[1]
        ibCount = Utilities.getInsideBarCount()
        textStairStep = textType == "Words" ? "Stairstep" : "SS"
        textInsideBar = textType == "Words" ? "x Inside Bar" : "xIB"
        txtDown = textType == "Words" ? "Down" : "▼"
        txtUp = textType == "Words" ? "Up" : "▲"
        labelText = textStairStep + ' ' + (direction == "Up" ? txtUp : txtDown) + (ssBreak ? ' Break' : '')
        if (showNumbers and ssBreak == false)
            labelText := str.tostring(ss) + " " + labelText
        if (ibCount > 0)
            labelText := labelText + ', ' + str.tostring(ibCount) + textInsideBar
        labelColor = ss == -1 ? breakLabelColor : stairstepLabelColor
        textColor = ss == -1 ? breakTextColor : ibCount > 0 ? insideBarTextColor : stairstepTextColor
        l = label.new(x=bar_index[0]+1, y=yloc, text=labelText, style=label.style_label_left, color=labelColor, textcolor=textColor, size=textSize)
        // Delete older labels (only have the latest one on the last candle)
        label.delete(l[1])

        // Delete the current one if there's no stairstep and no break
        if (ss == 0)
            label.delete(l[0])

doLabel('Down', minCandles)
doLabel('Up', minCandles)