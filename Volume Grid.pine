// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© jmosullivan

// @version=5
// Created By jmosullivan
// Volume Grid

indicator(title='Volume Grid', overlay=true, scale=scale.none)

import jmosullivan/PrivateTable/5

var COLOR_MODERATE = color.rgb(40, 98, 255)
var COLOR_EXTREME = color.rgb(232, 24, 170)
var COLOR_TRANSPARENT = color.rgb(255, 255, 255, 100)

// Configuration
grp = "Layout"
topOffset = input.int(group=grp, defval=0, title="Top Offset", options=[0, 1, 2, 3])
showTitle = input.bool(group=grp, defval=true, title="Show Title")
position = input.string(group=grp, defval=position.bottom_right, title="Position", options=[position.top_right, position.bottom_right, position.bottom_left])
textSize = input.string(group=grp, defval=size.tiny, title="Text Size", options=[size.tiny, size.small, size.normal, size.large])
colorExtreme = input.color(group=grp, defval=COLOR_EXTREME, title="Extreme Color")
colorModerate = input.color(group=grp, defval=COLOR_MODERATE, title="Moderate Color")
length = input.int(group=grp, defval=30, title="Vol MA Length")
transpose = input.bool(group=grp, defval=false, title="Vertical Table")
showChartData = input.bool(group=grp, defval=false, title="Show Active Chart Data")

// Functions

formatNumber(num) =>
    var n = num
    var ret = str.format("{0,number,#}", n)
    if (num > 999)
        n := num / 1000
        ret := str.format("{0,number,#.#}", n) + "k"
    if (num > 999999)
        n := num / 1000000
        ret := str.format("{0,number,#.#}", n) + "M"
    ret

addRow(dataMatrix, bgMatrix, label, vol, volMovingAverage) =>
    rvol = vol/volMovingAverage
    isExtreme = rvol >= 1
    clr = isExtreme ? colorExtreme : colorModerate
    matrix.add_row(dataMatrix, matrix.rows(dataMatrix), array.from(label, formatNumber(volMovingAverage), formatNumber(vol), str.format("{0,number,#.#}", rvol)))
    matrix.add_row(bgMatrix, matrix.rows(bgMatrix), array.from(colorModerate, colorModerate, clr, clr))

// Logic

chartVolumeMa = ta.sma(volume, length)
dailyVolume = request.security(syminfo.tickerid, "D", volume)
dailyVolumeMa = request.security(syminfo.tickerid, "D", ta.sma(volume, length))

if barstate.islast
    dataMatrix = matrix.new<string>()
    bgMatrix = matrix.new<color>()
    if showTitle
        matrix.add_row(dataMatrix, 0, array.from("", "AVG", "CUR", "RVOL"))
        matrix.add_row(bgMatrix, 0, array.from(COLOR_TRANSPARENT, colorModerate, colorModerate, colorModerate))

    if showChartData
        addRow(dataMatrix, bgMatrix, "Chart", volume, chartVolumeMa)

    addRow(dataMatrix, bgMatrix, "1D", dailyVolume, dailyVolumeMa)

    PrivateTable.fromMatrix(dataMatrix, bgMatrix, position, textSize=textSize, transposeTable=transpose)