// Â© jmosullivan
//@version=5
indicator("Trend Scout", max_lines_count=500, overlay=true, max_bars_back = 500)

import jmosullivan/PrivateTA/2
import jmosullivan/PrivateTable/10
import jmosullivan/Utilities/20

lookback = input.int(5, "Lookback value")
lineColor = input.color(defval=color.rgb(40, 98, 255), title="Scout line, label and text color", inline="1")
textColor = input.color(defval=color.white, title="", inline="1")
labelTextSize = input.string(defval=size.small, title="Label text size", options=[size.auto, size.tiny, size.small, size.normal, size.large, size.huge])
debugMode = input.bool(defval=false, title="Debug mode")
maxTimeframes = input.int(defval=4, title="Max Timeframes (debug)", minval=3, maxval = 10, step = 1)

d = array.new_string()
array.push(d, "Debug")

var timeframeArray = PrivateTA.getPivotTimeframes()

var pivot5mMatrix = matrix.new<float>()
var pivot15mMatrix = matrix.new<float>()
var pivot1hMatrix = matrix.new<float>()
var pivot4hMatrix = matrix.new<float>()
var pivot1dMatrix = matrix.new<float>()
var pivot1wMatrix = matrix.new<float>()
var pivot1MMatrix = matrix.new<float>()
var chartMatrix = matrix.new<float>()

var labelArray = array.new<label>()
var lineArray = array.new<line>()
var linefillArray = array.new<linefill>()

// Functions
cleanup() =>
    labelCount = array.size(labelArray)
    if (labelCount > 0)
        for i = 0 to labelCount - 1
            label.delete(array.get(labelArray, i))
    
    linefillCount = array.size(linefillArray)
    if (linefillCount > 0)
        for i = 0 to linefillCount - 1
            linefill.delete(array.get(linefillArray, i))

    lineCount = array.size(lineArray)
    if (lineCount > 0)
        for i = 0 to lineCount - 1
            line.delete(array.get(lineArray, i))

getMatrixByTimeframe(tf) =>
    switch tf
        "5" => pivot5mMatrix
        "15" => pivot15mMatrix
        "60" => pivot1hMatrix
        "240" => pivot4hMatrix
        "D" => pivot1dMatrix
        "W" => pivot1wMatrix
        "M" => pivot1MMatrix
        => chartMatrix

requestSecurity(timeframe, expression) =>
    request.security(syminfo.tickerid, timeframe, expression)

getTimeframeMultiplier(timeframe) =>
    num = str.tonumber(timeframe)
    if (na(num))
        num := 1
    num

timeframeInSeconds(string timeframe, bool includeWeekends = true) =>
    sMinute = 60
    sHour = sMinute * 60
    sDay = sHour * 24
    sWeek = sDay * (includeWeekends ? 7 : 5)
    // TV has a weird value for this, so I'm just using theirs when including weekends
    sMonth = includeWeekends ? timeframe.in_seconds("M") : sWeek * 4
    letter = str.substring(timeframe, str.length(timeframe) - 1)
    multiplier = switch letter
        "M" => sMonth
        "W" => sWeek
        "D" => sDay
        "H" => sHour
        => sMinute

    number = int(str.tonumber(timeframe))
    increment = na(number) ? 1 : number
    increment * multiplier

definePivotsByTimeframe(timeframe) =>
    // For larger timeframes, save fewer pivots
    // This is done so that smaller timeframe pivots drawn on the chart will fill up the larger ones
    maxRows = 400
    pivotMatrix = getMatrixByTimeframe(timeframe)
    pivotHigh = float(na)
    pivotLow = float(na)
    _lookback = lookback
    if (timeframe == "5")
        pivotHigh := requestSecurity("5", PrivateTA.pivotHigh(_lookback))
        pivotLow := requestSecurity("5", PrivateTA.pivotLow(_lookback))
    if (timeframe == "15")
        pivotHigh := requestSecurity("15", PrivateTA.pivotHigh(_lookback))
        pivotLow := requestSecurity("15", PrivateTA.pivotLow(_lookback))
    if (timeframe == "60")
        pivotHigh := requestSecurity("60", PrivateTA.pivotHigh(_lookback))
        pivotLow := requestSecurity("60", PrivateTA.pivotLow(_lookback))
    if (timeframe == "240")
        pivotHigh := requestSecurity("240", PrivateTA.pivotHigh(_lookback))
        pivotLow := requestSecurity("240", PrivateTA.pivotLow(_lookback))
    if (timeframe == "D")
        pivotHigh := requestSecurity("D", PrivateTA.pivotHigh(_lookback))
        pivotLow := requestSecurity("D", PrivateTA.pivotLow(_lookback))
    if (timeframe == "W")
        pivotHigh := requestSecurity("W", PrivateTA.pivotHigh(_lookback))
        pivotLow := requestSecurity("W", PrivateTA.pivotLow(_lookback))
    if (timeframe == "M")
        pivotHigh := requestSecurity("M", PrivateTA.pivotHigh(_lookback))
        pivotLow := requestSecurity("M", PrivateTA.pivotLow(_lookback))
    if timeframe == timeframe.period
        // Use the current chart's pivots
        pivotHigh := PrivateTA.pivotHigh(_lookback)
        pivotLow := PrivateTA.pivotLow(_lookback)

    PrivateTA.processPivot(pivotMatrix, pivotHigh, "High", _lookback, maxRows=maxRows)
    PrivateTA.processPivot(pivotMatrix, pivotLow, "Low", _lookback, maxRows=maxRows)

// Look through the given matrix for the last time there was an up or down trend,
// Return that trend and count
getLastTrend(pivotMatrix, startIndex = -1) =>
    trend = float(na)
    lastRealTrend = float(na)
    lastRealTrendCount = float(na)
    pivotRows = matrix.rows(pivotMatrix)
    i = startIndex == -1 ? pivotRows-1 : startIndex
    while i >= 0 and na(trend)
        lastRealTrend := PrivateTA.matrixGet(pivotMatrix, i, "trend")
        lastRealTrendCount := PrivateTA.matrixGet(pivotMatrix, i, "trendCount")
        if (lastRealTrend == 1 or lastRealTrend == 2)
            trend := lastRealTrend
        i -= 1
            
    [trend, lastRealTrendCount]

// Placeholder for finding price from parents
getParentPivot(sourceTimeframe, seekingPivotType, referencePivotPrice) =>
    timeframeArray = PrivateTA.getPivotTimeframes()
    scoutPrice = float(na)
    scoutPivotTime = float(na)
    scoutTimeframe = string(na)
    for i = 0 to array.size(timeframeArray) - 1
        timeframe = array.get(timeframeArray, i)
        if Utilities.timeframeInSeconds(timeframe) > Utilities.timeframeInSeconds(sourceTimeframe)
            parentMatrix = getMatrixByTimeframe(timeframe)
            parentMatrixRows = matrix.rows(parentMatrix)
            j = parentMatrixRows - 1
            while j > 0 and na(scoutPrice)
                if PrivateTA.matrixGet(parentMatrix, j, "pivotType") == seekingPivotType
                    pivotPrice = PrivateTA.matrixGet(parentMatrix, j, "pivotPrice")
                    if seekingPivotType == 1 and pivotPrice > referencePivotPrice
                        scoutPrice := pivotPrice
                        scoutTimeframe := timeframe
                        scoutPivotTime := PrivateTA.matrixGet(parentMatrix, j, "pivotTime")
                    else if seekingPivotType == 0 and pivotPrice < referencePivotPrice
                        scoutPrice := pivotPrice
                        scoutTimeframe := timeframe
                        scoutPivotTime := PrivateTA.matrixGet(parentMatrix, j, "pivotTime")

                j -= 1

    // Returns pivotPrice, pivotTime, pivot Timeframe
    [scoutPrice, scoutPivotTime, scoutTimeframe]

// Check to see if there are any fresh prices that negate the pivot analysis in the matrix
getFreshTrend(timeframe, pivotMatrix) => 
    freshTrend = float(na)
    scoutTimeframe = timeframe
    scoutType = string(na)
    scoutPrice = float(na)
    scoutTime = float(na)
    lastHigh = float(na)
    lastLow = float(na)
    pivotRows = matrix.rows(pivotMatrix)
    if pivotRows > 2
        pivotPrice = PrivateTA.matrixGet(pivotMatrix, pivotRows-1, "pivotPrice")
        lastPivotPrice = PrivateTA.matrixGet(pivotMatrix, pivotRows-2, "pivotPrice")
        lastPivotPrice2 = PrivateTA.matrixGet(pivotMatrix, pivotRows-3, "pivotPrice")
        pivotType = PrivateTA.matrixGet(pivotMatrix, pivotRows-1, "pivotType")
        trend = PrivateTA.matrixGet(pivotMatrix, pivotRows-1, "trend")

        if trend == PrivateTA.trendToNumber("Up")
            // If the last pivot was a high, and the current price has gone below the last low
            // OR if the last pivot was a low, and the current price has gone below the last pivot low before that
            if (pivotType == 1 and close < lastPivotPrice)
               or (pivotType == 0 and close < lastPivotPrice2)
                // Pattern is now a trend change bear
                freshTrend := PrivateTA.trendToNumber("Trend Change Bear")
                // Scouting a fresh low above something??
                scoutType := "Lower Low"
                [_scoutPrice, _scoutTime, _scoutTimeframe] = getParentPivot(timeframe, 0, pivotType == 1 ? lastPivotPrice : lastPivotPrice2)
                scoutPrice := _scoutPrice
                scoutTime := _scoutTime
                scoutTimeframe := na(_scoutTimeframe) ? scoutTimeframe : _scoutTimeframe

        else if trend == PrivateTA.trendToNumber("Down")
            // If the last pivot was a low, and the current price has gone above the last high
            // OR if the last pivot was a high, and the current price has gone above the last pivot high before that
            if (pivotType == 0 and close > lastPivotPrice)
               or (pivotType == 1 and close > lastPivotPrice2)
                // Pattern is now a trend change bull
                freshTrend := PrivateTA.trendToNumber("Trend Change Bull")
                // Scouting a fresh high below something??
                scoutType := "Higher High"
                [_scoutPrice, _scoutTime, _scoutTimeframe] = getParentPivot(timeframe, 1, pivotType == 1 ? lastPivotPrice : lastPivotPrice2)
                scoutPrice := _scoutPrice
                scoutTime := _scoutTime
                scoutTimeframe := na(_scoutTimeframe) ? scoutTimeframe : _scoutTimeframe

        else if trend == PrivateTA.trendToNumber("Consolidating")
            // Get last trend
            [lastTrend, lastTrendCount] = getLastTrend(pivotMatrix)
            lastHigh := pivotType == 1 ? pivotPrice : lastPivotPrice
            lastLow := pivotType == 0 ? pivotPrice : lastPivotPrice
            // If last trend was bullish
            if lastTrend == PrivateTA.trendToNumber("Up")
                // if price has just broken above the last high
                if close > lastHigh
                    freshTrend := PrivateTA.trendToNumber("Continuation Bull")
                    // Loop through all parents for any highs above current price
                    // Scout for price to set a higher high below one of those levels
                    scoutType := "Higher High"
                    [_scoutPrice, _scoutTime, _scoutTimeframe] = getParentPivot(timeframe, 1, lastHigh)
                    scoutPrice := _scoutPrice
                    scoutTime := _scoutTime
                    scoutTimeframe := na(_scoutTimeframe) ? scoutTimeframe : _scoutTimeframe
                
                // if price has just broken down below the last low
                else if close < lastLow
                    scoutType := "Lower Low"
                    freshTrend := PrivateTA.trendToNumber("Trend Change Bear")
                    // Loop through all parents for any lows below current price
                    // scout for price to set a lower low above one of those levels
                    [_scoutPrice, _scoutTime, _scoutTimeframe] = getParentPivot(timeframe, 0, lastLow)
                    scoutPrice := _scoutPrice
                    scoutTime := _scoutTime
                    scoutTimeframe := na(_scoutTimeframe) ? scoutTimeframe : _scoutTimeframe

            // if last trend was bearish
            else if lastTrend == PrivateTA.trendToNumber("Down")
                // if price has just broken above the last high
                if close > lastHigh
                    scoutType := "Higher High"
                    freshTrend := PrivateTA.trendToNumber("Trend Change Bull")
                    // loop through all parents for any highs above current price
                    // scout a higher high below the last resistance
                    [_scoutPrice, _scoutTime, _scoutTimeframe] = getParentPivot(timeframe, 1, lastHigh)
                    scoutPrice := _scoutPrice
                    scoutTime := _scoutTime
                    scoutTimeframe := na(_scoutTimeframe) ? scoutTimeframe : _scoutTimeframe

                // if price has just broken down below the last low
                else if close < lastLow
                    scoutType := "Lower Low"
                    freshTrend := PrivateTA.trendToNumber("Continuation Bear")
                    // loop through all parents looking for any  lows below current price
                    // scout a lower low above the last support
                    [_scoutPrice, _scoutTime, _scoutTimeframe] = getParentPivot(timeframe, 0, lastLow)
                    scoutPrice := _scoutPrice
                    scoutTime := _scoutTime
                    scoutTimeframe := na(_scoutTimeframe) ? scoutTimeframe : _scoutTimeframe

    [freshTrend, scoutTimeframe, scoutType, scoutPrice, scoutTime]

getStandardTrend(timeframe, pivotMatrix) => 
    pivotRows = matrix.rows(pivotMatrix)
    scoutType = string(na)
    scoutPrice = float(na)
    scoutTime = float(na)
    scoutTimeframe = timeframe
    if pivotRows > 1
        pivotPrice = PrivateTA.matrixGet(pivotMatrix, pivotRows-1, "pivotPrice")
        pivotTime = PrivateTA.matrixGet(pivotMatrix, pivotRows-1, "pivotTime")
        lastPivotPrice = PrivateTA.matrixGet(pivotMatrix, pivotRows-2, "pivotPrice")
        lastPivotTime = PrivateTA.matrixGet(pivotMatrix, pivotRows-2, "pivotTime")
        pivotType = PrivateTA.matrixGet(pivotMatrix, pivotRows-1, "pivotType")
        trend = PrivateTA.matrixGet(pivotMatrix, pivotRows-1, "trend")

        // HHs/HLs - Up
        if trend == PrivateTA.trendToNumber("Up")
            if pivotType == 0
                // If we set a higher low, scout a higher high on a parent timeframe
                // Look to the parent for it's direction and next resistance
			    // where is the next resistance on the higher timeframe?
			    // Need to look through all of the higher timeframes until you find one that has an immediately low or high above the last price
                // The easiest thing might be to just look at the matrix being constructed for the level above
                // If it's a crazy uptrend, we might be at bluesky. Even if we aren't, there may not be an immediate level overhead.
                // Safest thing to do is to run through all of the timeframes one by one looking for a high that is higher than price
                // Blue sky otherwise?
                scoutType := "Higher High"
                [_scoutPrice, _scoutTime, _scoutTimeframe] = getParentPivot(timeframe, 1, lastPivotPrice)
                scoutPrice := _scoutPrice
                scoutTime := _scoutTime
                scoutTimeframe := na(_scoutTimeframe) ? scoutTimeframe : _scoutTimeframe
            else
                // If we just set a higher high, scout a higher low on this timeframe
                scoutType := "Higher Low"
                scoutPrice := lastPivotPrice
                scoutTime := lastPivotTime

        // LHs/LLs - Down
        else if trend == PrivateTA.trendToNumber("Down")
            if pivotType == 1
                // If we just set a lower high, scout a lower low
                // Where is the next support on the higher timeframe?
                // Safest thing to do is to run through all of the timeframes one by one looking for a low that is lower than price
                // "Look out below" otherwise
                scoutType := "Lower Low"
                [_scoutPrice, _scoutTime, _scoutTimeframe] = getParentPivot(timeframe, 0, lastPivotPrice)
                scoutPrice := _scoutPrice
                scoutTime := _scoutTime
                scoutTimeframe := na(_scoutTimeframe) ? scoutTimeframe : _scoutTimeframe
            else
                // 	If we just set a lower low, scout a lower high
                // Scout below the lower high on this timeframe
                scoutType := "Lower High"
                scoutPrice := lastPivotPrice
                scoutTime := lastPivotTime

        // HH/LL - Megaphone
        else if trend == PrivateTA.trendToNumber("Megaphone")
            // Get last trend
            [lastTrend, lastTrendCount] = getLastTrend(pivotMatrix)
            // If last trend was bullish
            if lastTrend == PrivateTA.trendToNumber("Up")
                // If just set a lower low
                if pivotType == 0
                    // Watch for a potential bearish trend change with a lower high
                    scoutType := "Lower High"
                    scoutPrice := lastPivotPrice
                    scoutTime := lastPivotTime
                // if just set a higher high
                else
                    // Watch for continuation with a higher low
                    scoutType := "Higher Low"
                    scoutPrice := lastPivotPrice
                    scoutTime := lastPivotTime

            // If last trend was bearish
            else if lastTrend == PrivateTA.trendToNumber("Down")
                // if just set a lower low
                if pivotType == 0
                    // Watch for continuation with a lower high
                    scoutType := "Lower High"
                    scoutPrice := lastPivotPrice
                    scoutTime := lastPivotTime
                // if just set a higher high
                else
                    // Watch for a bullish trend change with a higher low
                    scoutType := "Higher Low"
                    scoutPrice := lastPivotPrice
                    scoutTime := lastPivotTime

        // LHs/HLs - Consolidating
        else if trend == PrivateTA.trendToNumber("Consolidating")
            // if just set a higher low
            if pivotType == 0
                // scout a lower high for continuation of pattern
                scoutType := "Lower High"
                scoutPrice := lastPivotPrice
                scoutTime := lastPivotTime
            // if just set a lower high
            else
                // scout a higher low for continuation of pattern
                scoutType := "Higher Low"
                scoutPrice := lastPivotPrice
                scoutTime := lastPivotTime

    [scoutTimeframe, scoutType, scoutPrice, scoutTime]

trendToTrendString(scoutTrend) =>
    switch scoutTrend
        1 => "uptrend"
        2 => "downtrend"
        3 => "megaphone"
        4 => "consolidation"
        5 => "bull break"
        6 => "bear break"
        7 => "bullish continuation"
        8 => "bearish continuation"
        => "unknown pattern"

plural(number, singular, plural = "") =>
    _plural = plural == "" ? singular + "s" : plural
    number == 1 ? singular : _plural

getScoutPrice(startPrice, float targetPrice, lastPivotType, scoutTrend) =>
    // Figure out how far to place the scout price relative to the last pivot
    padPercent = 0.8
    if (lastPivotType == 1 and scoutTrend == 1) // Uptrend
       or (lastPivotType == 0 and scoutTrend == 2) // Downtrend
        padPercent := 0.382

    scoutPrice = na(targetPrice) ? close : targetPrice
    if not na(targetPrice)
        diff = math.abs(targetPrice - startPrice) * padPercent
        scoutPrice := startPrice > scoutPrice ? startPrice - diff : startPrice + diff
    scoutPrice

getMovesFromTrendCount(trendCount) =>
    // Add 3 for the prior 3 pivots that accounted for this trend being established. 
    trendCount + 3

getTrend(chartMatrix) =>
    scoutString = string(na)
    if (barstate.islast)
        dataMatrix = matrix.new<string>()
        // Timeframe, Trend (Strength/Number of Moves), Last Pivot Was, Currently Scouting a, where (above [tf] support / below [tf] resistance), at price, Current Fib Level, Current Health of Move
        columnArray = array.from(
           "Rows", 
           "Timeframe", // 15
           "Trend (# Moves)", // Up (4)
           "Last Pivot Was a", // Lower High
           "Scouting a", // 4h Higher Low
           "at", // above
           "Price", // 5.45
           "Fib %",
           "Health" // Healthy, Extended
           )
        matrix.add_row(dataMatrix, 0, columnArray)
        colorMatrix = matrix.new<color>()
        columnCount = array.size(columnArray)
        matrix.add_row(colorMatrix, 0, array.new_color(columnCount, color.blue))

        // Variables for looping
        scoutTrend = float(na)
        scoutTrendCount = float(0)
        scoutTimeframe = string(na)
        scoutType = string(na)
        scoutWhere = "-"
        scoutPrice = float(na)
        scoutTime = float(na)
        percentInRange = float(na)

        // Loop through each matrix transferring the last (most recent) row to a table
        doTrend = string(na)
        // If the current timeframe isn't in the timeframe array, include it in the valid count so the correct parents are found
        validMatrixCount = array.includes(timeframeArray, timeframe.period) ? 0 : 1
        for i = 0 to array.size(timeframeArray) - 1
            timeframe = array.get(timeframeArray, i)
            pivotMatrix = getMatrixByTimeframe(timeframe)
            pivotRows = matrix.rows(pivotMatrix)
            if (pivotRows > 0)
                validMatrixCount += 1
                [_scoutTrend, _scoutTimeframe, _scoutType, _scoutPrice, _scoutTime] = getFreshTrend(timeframe, pivotMatrix)
                scoutTrend := _scoutTrend
                scoutTimeframe := _scoutTimeframe
                scoutType := _scoutType
                scoutPrice := _scoutPrice
                scoutTime := _scoutTime
                pivotType = PrivateTA.matrixGet(pivotMatrix, pivotRows-1, "pivotType")
                isHigher = PrivateTA.matrixGet(pivotMatrix, pivotRows-1, "isHigher")
                priceDistance = PrivateTA.matrixGet(pivotMatrix, pivotRows-1, "priceDistance")
                doTrend := "Fresh"
                if na(scoutTrend)
                    doTrend := "Standard"
                    [_scoutTimeframe, _scoutType, _scoutPrice, _scoutTime] = getStandardTrend(timeframe, pivotMatrix)
                    scoutTimeframe := _scoutTimeframe
                    scoutType := _scoutType
                    scoutPrice := _scoutPrice
                    scoutTime := _scoutTime
                    scoutTrend := PrivateTA.matrixGet(pivotMatrix, pivotRows-1, "trend")
                    scoutTrendCount := PrivateTA.matrixGet(pivotMatrix, pivotRows-1, "trendCount")
                    percentInRange := PrivateTA.matrixGet(pivotMatrix, pivotRows-1, "percentInRange")

                if scoutType == "Higher High" or scoutType == "Lower High"
                    scoutWhere := "below"
                else if scoutType == "Higher Low" or scoutType == "Lower Low"
                    scoutWhere := "above"

                matrix.add_row(dataMatrix, matrix.rows(dataMatrix), array.from(
                   str.tostring(pivotRows),
                   PrivateTA.getTimeframeEnglish(timeframe),
                   str.format("{0} ({1,number,#})", PrivateTA.trendToString(scoutTrend), getMovesFromTrendCount(scoutTrendCount)),
                   (isHigher ? "Higher " : "Lower ") + (pivotType == 1 ? "High" : "Low"),
                   PrivateTA.getTimeframeEnglish(scoutTimeframe) + " " + scoutType,
                   na(scoutPrice) ? "-" : scoutWhere,
                   na(scoutPrice) ? "-" : str.tostring(scoutPrice, format.mintick),
                   na(percentInRange) ? str.tostring(percentInRange, format.mintick) : "-",
                   "Healthy?"
                   ))

                matrix.add_row(colorMatrix, matrix.rows(colorMatrix), array.new_color(columnCount, color.blue))

                // If looking at a grandparent of the current chart, build up the string
                if validMatrixCount == 3
                    scoutString := str.format(
                       "{0} {1} ({2} {3})\nScout {4} {5} ",
                       PrivateTA.getTimeframeEnglish(timeframe),
                       trendToTrendString(scoutTrend), 
                       str.tostring(getMovesFromTrendCount(scoutTrendCount)),
                       "moves",
                       PrivateTA.getTimeframeEnglish(scoutTimeframe),
                       str.lower(scoutType)
                       )
                    if not na(scoutPrice)
                        scoutString := scoutString 
                           + scoutWhere
                           + " " 
                           + str.tostring(scoutPrice, format.mintick)

                    // Draw a line from the last pivot to the scout price 
                    // (or current price if scout price wasn't found)
                    pivotPrice = PrivateTA.matrixGet(pivotMatrix, pivotRows-1, "pivotPrice")
                    pivotTime = math.round(PrivateTA.matrixGetPivotTime(timeframe, pivotMatrix, chartMatrix, pivotRows-1))
                    oneCandleTime = time - time[1]
                    x2 = time + 20 * oneCandleTime
                    y2 = getScoutPrice(pivotPrice, scoutPrice, pivotType, scoutTrend)
                    array.push(lineArray, line.new(
                       xloc=xloc.bar_time,
                       x1=pivotTime,
                       y1=pivotPrice, 
                       x2=x2,
                       y2=y2, 
                       color=lineColor,
                       style=line.style_dashed, 
                       width=2
                       ))

                    Utilities.drawLabel(
                       labelStyle=(pivotType == 0 ? label.style_label_upper_left : label.style_label_lower_left), 
                       xloc=xloc.bar_time,
                       x=x2, 
                       y=y2, 
                       labelText=scoutString, 
                       textSize=labelTextSize, 
                       labelColor=lineColor, 
                       textColor=textColor
                       )
                
        if matrix.rows(dataMatrix) > 1 and debugMode
            PrivateTable.fromMatrix(dataMatrix, colorMatrix, position=position.bottom_left, borderWidth=1)


getMatrixTrendString(matrix<float> pivotMatrix) =>
    rows = matrix.rows(pivotMatrix)
    if rows > 0
        trend = PrivateTA.matrixGet(pivotMatrix, rows-1, "trend")
        trendCount = PrivateTA.matrixGet(pivotMatrix, rows-1, "trendCount")
        trendString = str.format("{0} ({1})", PrivateTA.trendToString(trend), trendCount+1)

// Populate the pivots for this timeframe
definePivotsByTimeframe(timeframe.period)

// Populate the higher timeframe matrixes we care about
parentTimeframe = string(na)
grandParentTimeframe = string(na)
validTimeframeCount = 0
for i = 0 to array.size(timeframeArray) - 1
    timeframe = array.get(timeframeArray, i)
    if Utilities.timeframeInSeconds(timeframe) > timeframe.in_seconds(timeframe.period)
        validTimeframeCount += 1
        if validTimeframeCount <= maxTimeframes
            definePivotsByTimeframe(timeframe)

    if validTimeframeCount == 1
        parentTimeframe := timeframe
    else if validTimeframeCount == 2
        grandParentTimeframe := timeframe

// Draw the full table
if barstate.islast
    cleanup()
    chartMatrix = getMatrixByTimeframe(timeframe.period)
    array.push(d, str.tostring(matrix.rows(chartMatrix)))
    getTrend(chartMatrix)

    // Draw grandparent lines and labels
    if not na(grandParentTimeframe)
        grandparentMatrix = getMatrixByTimeframe(grandParentTimeframe)
        PrivateTA.drawPivotLines(grandParentTimeframe, grandparentMatrix, chartMatrix, lineArray, width=2, maxLines=8)
        if debugMode
            PrivateTA.drawPivotLabels(grandParentTimeframe, grandparentMatrix, chartMatrix, labelArray, maxLabels=9)

        // // Debug the last 20 rows added to the grandparent pivot table so you can see where the scout data is coming from:
        // rows = matrix.rows(grandparentMatrix)
        // while rows > 20
        //     matrix.remove_row(grandparentMatrix, 0)
        //     rows -= 1
        // PrivateTable.fromMatrix(grandparentMatrix, position = position.bottom_right)

    if debugMode
        PrivateTable.fromArray(d, transposeTable = true, position=position.bottom_right)

