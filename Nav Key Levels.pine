//@version=5
indicator("Nav Key Levels", shorttitle="Key Levels", overlay=true)

import jmosullivan/Utilities/16
import jmosullivan/PrivateTable/10

// General Settings
grpGeneral = "General Settings"
labelStyle = input.string(group=grpGeneral, defval="Left", title="Label style", options=["Left", "Plain Text"], tooltip="The style of the label. If 'Plain Text' is chosen, the text color input below will be ignored, and the text will be the same color as the line.")
labelTextSize = input.string(defval=size.small, title="Label text size", options=[size.auto, size.tiny, size.small, size.normal, size.large, size.huge], group=grpGeneral)
labelOffset = input.int(defval=2, title="Label offset", minval=1, maxval=100, step=1, group=grpGeneral, tooltip="The amount to push the labels to the right of the last candle.")
showPrice = input.bool(true, "Show price on the labels", tooltip="Include the price of the key level in the label before the text.", group=grpGeneral)
lineStyle = input.string(group=grpGeneral, defval="Solid", title="Line style", options=["Solid", "Dashed", "Dotted"], tooltip="The style of the lines.")
autoThicken = input.bool(true, "Thicken lines when they stack up at levels", tooltip="When more than one level meets at a price, the labels will combine themselves for readability. When labels combine, if this option is enabled, the line thickness will increase by 1 for every level that gets stacked up (to a max thickness of 4).", group=grpGeneral)

grpInsidebars = "Special Decorations"
insidebarShow = input.bool(true, "Inside bar decoration", group=grpInsidebars)
insidebarTextColor = input.color(color.white, "", group=grpInsidebars, inline="0")
insidebarColor = input.color(color.rgb(232, 24, 170), "", group=grpInsidebars, inline="0")
insidebarWidth = input.int(2, "", options=[1, 2, 3, 4], group=grpInsidebars, inline="0")
insidebarText = input.string(" (#x Inside Bar)", "", group=grpInsidebars, inline="0", tooltip="Text color, line color, line width, and label text. If the level is on an inside bar, the label text will be added to the label indicating how many inside bars there are. The # character will be replaced with the number of inside bars. For example: '3x Inside Bar' if the level marks the third inside bar.")

defaultTransparency = 20
SPACE = "â€‚"

grpLevels = "Key Level Appearance"
levelTooltip = "Line / label color, text color, 'use custom text color' checkbox, line width, and label text.\n\nIf you uncheck the 'use custom text color' checkbox, the label background will disappear and the text will be the same color as the line (this is helpful if you don't like the big bulky labels that TradingView provides). If you leave it checked, you can use the color input to customize the color of the text on your label.\n\nThe 'Label text' field will be split on the '/' slash character. The first value will be the 'high' string, and the latter will be the 'low' string."

inline1 = "1"
premarketShow = input.bool(true, "Premarket highs & lows", group=grpLevels)
premarketColor = input.color(color.new(color.orange, defaultTransparency), "", group=grpLevels, inline=inline1)
premarketTextColor = input.color(color.white, "", group=grpLevels, inline=inline1)
premarketWidth = input.int(1, "", options=[1, 2, 3, 4], group=grpLevels, inline=inline1)
premarketText = input.string("Premarket High/Premarket Low", "", group=grpLevels, inline=inline1, tooltip=levelTooltip)

inline2 = "2"
prevHourShow = input.bool(true, "Previous hour highs & lows", group=grpLevels)
prevHourColor = input.color(color.new(color.blue, defaultTransparency), "", group=grpLevels, inline=inline2)
prevHourTextColor = input.color(color.white, "", group=grpLevels, inline=inline2)
prevHourWidth = input.int(1, "", options=[1, 2, 3, 4], group=grpLevels, inline=inline2)
prevHourText = input.string("Prev Hour High/Prev Hour Low", "", group=grpLevels, inline=inline2, tooltip=levelTooltip)

inline3 = "3"
todayShow = input.bool(true, "Today highs & lows", group=grpLevels)
todayColor = input.color(color.new(color.navy, defaultTransparency), "", group=grpLevels, inline=inline3)
todayTextColor = input.color(color.white, "", group=grpLevels, inline=inline3)
todayWidth = input.int(1, "", options=[1, 2, 3, 4], group=grpLevels, inline=inline3)
todayText = input.string("Day High/Day Low", "", group=grpLevels, inline=inline3, tooltip=levelTooltip)

inline4 = "4"
afterHoursShow = input.bool(true, "After hours highs & lows", group=grpLevels)
afterHoursColor = input.color(color.new(color.gray, defaultTransparency), "", group=grpLevels, inline=inline4)
afterHoursTextColor = input.color(color.white, "", group=grpLevels, inline=inline4)
afterHoursWidth = input.int(1, "", options=[1, 2, 3, 4], group=grpLevels, inline=inline4)
afterHoursText = input.string("After Hours High/After Hours Low", "", group=grpLevels, inline=inline4, tooltip=levelTooltip)

inline5 = "5"
prevDayShow = input.bool(true, "Previous day highs & lows", group=grpLevels)
prevDayColor = input.color(color.new(color.purple, defaultTransparency), "", group=grpLevels, inline=inline5)
prevDayTextColor = input.color(color.white, "", group=grpLevels, inline=inline5)
prevDayWidth = input.int(1, "", options=[1, 2, 3, 4], group=grpLevels, inline=inline5)
prevDayText = input.string("Yesterday High/Yesterday Low", "", group=grpLevels, inline=inline5, tooltip=levelTooltip)

inline6 = "6"
prevWeekShow = input.bool(true, "Previous week highs & lows", group=grpLevels)
prevWeekColor = input.color(color.new(color.teal, defaultTransparency), "", group=grpLevels, inline=inline6)
prevWeekTextColor = input.color(color.white, "", group=grpLevels, inline=inline6)
prevWeekWidth = input.int(1, "", options=[1, 2, 3, 4], group=grpLevels, inline=inline6)
prevWeekText = input.string("Prev Week High/Prev Week Low", "", group=grpLevels, inline=inline6, tooltip=levelTooltip)

inline7 = "7"
prevMonthShow = input.bool(true, "Previous month highs & lows", group=grpLevels)
prevMonthColor = input.color(color.new(color.black, defaultTransparency), "", group=grpLevels, inline=inline7)
prevMonthTextColor = input.color(color.white, "", group=grpLevels, inline=inline7)
prevMonthWidth = input.int(1, "", options=[1, 2, 3, 4], group=grpLevels, inline=inline7)
prevMonthText = input.string("Prev Month High/Prev Month Low", "", group=grpLevels, inline=inline7, tooltip=levelTooltip)

inline8 = "8"
atrTooltip = levelTooltip + "\n\nATR values are calculated, and then the highs and lows are plotted based on the low of the day plus the ATR value for the ATR high, and the high of the day minus the ATR value for the ATR low."
atrShow = input.bool(true, "Average true range highs & lows", group=grpLevels)
atrColor = input.color(color.new(color.olive, defaultTransparency), "", group=grpLevels, inline=inline8)
atrTextColor = input.color(color.white, "", group=grpLevels, inline=inline8)
atrWidth = input.int(1, "", options=[1, 2, 3, 4], group=grpLevels, inline=inline8)
atrText = input.string("ATR High/ATR Low", "", group=grpLevels, inline=inline8, tooltip=atrTooltip)

inline9 = "9"
atr2Show = input.bool(true, "2x average true range highs & lows", group=grpLevels)
atr2Color = input.color(color.new(color.olive, defaultTransparency), "", group=grpLevels, inline=inline9)
atr2TextColor = input.color(color.white, "", group=grpLevels, inline=inline9)
atr2Width = input.int(1, "", options=[1, 2, 3, 4], group=grpLevels, inline=inline9)
atr2Text = input.string("2xATR High/2xATR Low", "", group=grpLevels, inline=inline9, tooltip=atrTooltip)

// Variables used in functions
levelsArray = array.new_float()
dupesCountArray = array.new_int()
insidebarCountArray = array.new_int()
labelsArray = array.new_string()
duplicatesArray = array.new_string()

// Examines priceArray for prices "near" the given price. If found, returns the index of the found price in priceArray
indexOfNearby(priceArray, price) =>
    nearbyThreshold = 0.01
    if (price > 1)
        nearbyThreshold := 0.02
    if (price > 10)
        nearbyThreshold := 0.04
    if (price > 100)
        nearbyThreshold := 0.1
    if (price > 200)
        nearbyThreshold := 0.20
    if (price > 500)
        nearbyThreshold := 0.60
    if (price > 1000)
        nearbyThreshold := 1.0

    indexOf = -1
    size = array.size(priceArray)
    if (size > 0)
        for i = 0 to size - 1
            otherPrice = array.get(priceArray, i)
            if (
               (otherPrice >= price and otherPrice <= price + nearbyThreshold)
               or 
               (otherPrice <= price and otherPrice >= price - nearbyThreshold)
               )
                indexOf := i
    indexOf

combineDuplicate(price, show, labelText, insideBarCount) => 
    if (show)
        // First, account for inside bars on the labels
        _labelText = labelText
        if (insideBarCount > 0 and insidebarShow)
            _labelText := labelText + str.replace(insidebarText, '#', str.tostring(insideBarCount))

        // Prepend price if necessary
        if (showPrice)
            _labelText := str.tostring(price, format.mintick) + ": " + _labelText

        // Now look in the collections to see if this item already has an entry
        matchIndex = indexOfNearby(levelsArray, price)
        if (matchIndex >= 0)
            // If it does, append this label to that one
            array.set(labelsArray, matchIndex, array.get(labelsArray, matchIndex) + ", " + _labelText)
            // And add it to the duplicates array
            array.push(duplicatesArray, labelText)
            // And increase the duplicate count for this price level
            array.set(dupesCountArray, matchIndex, array.get(dupesCountArray, matchIndex) + 1)
            // Increase the insidebar count if necessary
            array.set(insidebarCountArray, matchIndex, array.get(insidebarCountArray, matchIndex) + insideBarCount)
        else
            // If no match...
            // Add it to the collections
            array.push(levelsArray, price)
            array.push(labelsArray, _labelText)
            array.push(dupesCountArray, 1)
            array.push(insidebarCountArray, insideBarCount)

drawLevel(price, show, labelText, lineColor, textColor, width) =>
    matchIndex = indexOfNearby(levelsArray, price)
    if (matchIndex >= 0 and show)
        matchPrice = array.get(levelsArray, matchIndex)
        matchLabelText = array.get(labelsArray, matchIndex)
        _show = show
        // If this value was a duplicate, don't show it
        if (show and array.indexof(duplicatesArray, labelText) >= 0)
            _show := false

        isInsideBar = array.get(insidebarCountArray, matchIndex) > 0 and insidebarShow
        _lineColor = isInsideBar ? insidebarColor : lineColor
        _textColor = isInsideBar ? insidebarTextColor : textColor
        lineWidth = isInsideBar ? insidebarWidth : width
        // Thicken the lines if necessary
        dupesCount = 0
        if (autoThicken)
            dupesCount := array.get(dupesCountArray, matchIndex)
            if (dupesCount > lineWidth)
                lineWidth := dupesCount
        
        if labelStyle == "Plain Text"
            _textColor := _lineColor
        
        matchLabelText := Utilities.padLabelString(matchLabelText, labelStyle)
        Utilities.drawLineAndLabel(_show, labelStyle, bar_index[0] + labelOffset, price, lineStyle, lineWidth, _lineColor, matchLabelText, labelTextSize, _textColor)

        // If the matched price doesn't equal the provided price, draw the line for that level also
        if (barstate.islast and matchPrice != price)
            Utilities.drawLine(true, bar_index[0], price, lineStyle, width, lineColor)

getPremarketLevel(highOrLow) =>
    hourStart = 4 
    minStart = 0
    hourEnd = 9
    minEnd = 29
    resolution = "1" // Will use the 1m to determine the highs/lows of premarket
    start = (hourStart * 60) + minStart
    end = (hourEnd * 60) + minEnd
    level = request.security(syminfo.tickerid, resolution, Utilities.getLevelBetweenTimes(highOrLow, start, end))
    level

getAfterHoursLevel(highOrLow) =>
    hourStart = 16 
    minStart = 0
    hourEnd = 19
    minEnd = 59
    resolution = "1" // Will use the 1m to determine the highs/lows of after hours session
    start = (hourStart * 60) + minStart
    end = (hourEnd * 60) + minEnd
    level = request.security(syminfo.tickerid, resolution, Utilities.getLevelBetweenTimes(highOrLow, start, end))
    level

getAtrLevel(atr, highOrLow, refPrice, multiplier = 1) =>
    level = session.ismarket ? atr * multiplier : na
    if not na(level)
        level := highOrLow == 'high' ? refPrice + level : refPrice - level
    level

getHLString(hl, str) =>
    slash = str.pos(str, "/")
    ret = na(slash) ? str : hl == 'high' ? str.substring(str, 0, slash) : str.substring(str, slash+1)
    ret

getDailyLevels() =>
    h = session.ispremarket ? high : high[1]
    l = session.ispremarket ? low : low[1]
    [h, l, Utilities.getInsideBarCount()]

// Define the levels
premarketHigh = getPremarketLevel('high')
premarketLow = getPremarketLevel('low')
[prevHourHigh, prevHourLow, prevHourInsideBarCount] = request.security(syminfo.tickerid, '60', [high[1], low[1], Utilities.getInsideBarCount()])
[todayHigh, todayLow, atr, todayInsideBarCount] = request.security(syminfo.tickerid, 'D', [high, low, ta.atr(14), Utilities.getInsideBarCount()])
afterHoursHigh = getAfterHoursLevel('high')
afterHoursLow = getAfterHoursLevel('low')
[prevDayHigh, prevDayLow, prevDayInsideBarCount] = request.security(syminfo.tickerid, 'D', [high[1], low[1], Utilities.getInsideBarCount()])
[prevWeekHigh, prevWeekLow, prevWeekInsideBarCount] = request.security(syminfo.tickerid, 'W', [high[1], low[1], Utilities.getInsideBarCount()])
[prevMonthHigh, prevMonthLow, prevMonthInsideBarCount] = request.security(syminfo.tickerid, 'M', [high[1], low[1], Utilities.getInsideBarCount()])
atrHigh = getAtrLevel(atr, 'high', todayLow)
atrLow = getAtrLevel(atr, 'low', todayHigh)
atr2High = getAtrLevel(atr, 'high', todayLow, 2)
atr2Low = getAtrLevel(atr, 'low', todayHigh, 2)

// Search for duplicate levels, and concatenate their labels
if (barstate.islast)
    // Kludge: During premarket, TV considers yesterday to be 2 days ago. This fixes that.
    if (session.ispremarket)
        prevDayHigh := todayHigh
        prevDayLow := todayLow

    // Only show the lines on timeframes where they make sense
    t = timeframe.in_seconds('')
    th = timeframe.in_seconds('60')
    td = timeframe.in_seconds('1D')
    tw = timeframe.in_seconds('1W')
    tm = timeframe.in_seconds('1M')
    showAfterHours = t < td and afterHoursShow
    showPremarket = t < td and premarketShow
    showPrevHour = t <= th and prevHourShow
    showToday = t <= td and todayShow and session.ispremarket == false
    showPrevDay = t <= td and prevDayShow
    showPrevWeek = t <= tw and prevWeekShow
    showPrevMonth = t <= tm and prevMonthShow
    showAtr = t <= td and atrShow
    showAtr2 = t <= td and atr2Show

    combineDuplicate(premarketHigh, showPremarket, getHLString('high', premarketText), 0)
    combineDuplicate(premarketLow, showPremarket, getHLString('low', premarketText), 0)
    combineDuplicate(prevHourHigh, showPrevHour, getHLString('high', prevHourText), prevHourInsideBarCount)
    combineDuplicate(prevHourLow, showPrevHour, getHLString('low', prevHourText), prevHourInsideBarCount)
    combineDuplicate(todayHigh, showToday, getHLString('high', todayText), todayInsideBarCount)
    combineDuplicate(todayLow, showToday, getHLString('low', todayText), todayInsideBarCount)
    combineDuplicate(afterHoursHigh, showAfterHours, getHLString('high', afterHoursText), 0)
    combineDuplicate(afterHoursLow, showAfterHours, getHLString('low', afterHoursText), 0)
    combineDuplicate(atrHigh, showAtr, getHLString('high', atrText), 0)
    combineDuplicate(atrLow, showAtr, getHLString('low', atrText), 0)
    combineDuplicate(atr2High, showAtr2, getHLString('high', atr2Text), 0)
    combineDuplicate(atr2Low, showAtr2, getHLString('low', atr2Text), 0)
    combineDuplicate(prevDayHigh, showPrevDay, getHLString('high', prevDayText), prevDayInsideBarCount)
    combineDuplicate(prevDayLow, showPrevDay, getHLString('low', prevDayText), prevDayInsideBarCount)
    combineDuplicate(prevWeekHigh, showPrevWeek, getHLString('high', prevWeekText), prevWeekInsideBarCount)
    combineDuplicate(prevWeekLow, showPrevWeek, getHLString('low', prevWeekText), prevWeekInsideBarCount)
    combineDuplicate(prevMonthHigh, showPrevMonth, getHLString('high', prevMonthText), prevMonthInsideBarCount)
    combineDuplicate(prevMonthLow, showPrevMonth, getHLString('low', prevMonthText), prevMonthInsideBarCount)

    // Draw the lines and labels
    drawLevel(prevMonthHigh, showPrevMonth, getHLString('high', prevMonthText), prevMonthColor, prevMonthTextColor, prevMonthWidth)
    drawLevel(prevMonthLow, showPrevMonth, getHLString('low', prevMonthText), prevMonthColor, prevMonthTextColor, prevMonthWidth)
    drawLevel(prevWeekHigh, showPrevWeek, getHLString('high', prevWeekText), prevWeekColor, prevWeekTextColor, prevWeekWidth)
    drawLevel(prevWeekLow, showPrevWeek, getHLString('low', prevWeekText), prevWeekColor, prevWeekTextColor, prevWeekWidth)
    drawLevel(prevDayHigh, showPrevDay, getHLString('high', prevDayText), prevDayColor, prevDayTextColor, prevDayWidth)
    drawLevel(prevDayLow, showPrevDay, getHLString('low', prevDayText), prevDayColor, prevDayTextColor, prevDayWidth)
    drawLevel(afterHoursHigh, showAfterHours, getHLString('high', afterHoursText), afterHoursColor, afterHoursTextColor, afterHoursWidth)
    drawLevel(afterHoursLow, showAfterHours, getHLString('low', afterHoursText), afterHoursColor, afterHoursTextColor, afterHoursWidth)
    drawLevel(atrHigh, showAtr, getHLString('high', atrText), atrColor, atrTextColor, atrWidth)
    drawLevel(atrLow, showAtr, getHLString('low', atrText), atrColor, atrTextColor, atrWidth)
    drawLevel(atr2High, showAtr2, getHLString('high', atr2Text), atr2Color, atr2TextColor, atr2Width)
    drawLevel(atr2Low, showAtr2, getHLString('low', atr2Text), atr2Color, atr2TextColor, atr2Width)
    drawLevel(todayHigh, showToday, getHLString('high', todayText), todayColor, todayTextColor, todayWidth)
    drawLevel(todayLow, showToday, getHLString('low', todayText), todayColor, todayTextColor, todayWidth)
    drawLevel(prevHourHigh, showPrevHour, getHLString('high', prevHourText), prevHourColor, prevHourTextColor, prevHourWidth)
    drawLevel(prevHourLow, showPrevHour, getHLString('low', prevHourText), prevHourColor, prevHourTextColor, prevHourWidth)
    drawLevel(premarketHigh, showPremarket, getHLString('high', premarketText), premarketColor, premarketTextColor, premarketWidth)
    drawLevel(premarketLow, showPremarket, getHLString('low', premarketText), premarketColor, premarketTextColor, premarketWidth)