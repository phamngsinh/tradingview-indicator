// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© jmosullivan

//@version=5

// @description Utility functions for my indicators.
library("Utilities")

// @function Tradingview doesn't give you a nice way to put the line styles into a dropdown for configuration settings. So, I specify them in the following format: ["Solid", "Dashed", "Dotted", "None/Hidden"]. This function takes care of converting those custom strings back to the ones expected by tradingview scripts. 
// @param show (string) styleString
// @param acceptGivenIfNoMatch (bool) If no match for styleString is found and this is true, the function will return styleString, otherwise it will return tradingview's preferred default
// @returns (string) The string expected by tradingview functions
export getLineStyleFromString(string styleString, bool acceptGivenIfNoMatch = true) =>
    ret = switch styleString
        "Dotted" => line.style_dotted
        "Dashed" => line.style_dashed
        "Solid" => line.style_solid
        => acceptGivenIfNoMatch ? styleString : line.style_solid
    ret

// @function Tradingview doesn't give you a nice way to put the label styles into a dropdown for configuration settings. So, I specify them in the following format: ["Center", "Left", "Lower Left", "Lower Right", "Right", "Up", "Upper Left", "Upper Right", "Plain Text", "No Labels"]. This function takes care of converting those custom strings back to the ones expected by tradingview scripts. 
// @param show (string) styleString
// @param acceptGivenIfNoMatch (bool) If no match for styleString is found and this is true, the function will return styleString, otherwise it will return tradingview's preferred default
// @returns (string) The string expected by tradingview functions
export getLabelStyleFromString(string styleString, bool acceptGivenIfNoMatch = true) =>
    ret = switch styleString
        "Down" => label.style_label_down
        "Center" => label.style_label_center
        "Left" => label.style_label_left
        "Lower Left" => label.style_label_lower_left
        "Lower Right" => label.style_label_lower_right
        "Right" => label.style_label_right
        "Up" => label.style_label_up
        "Upper Left" => label.style_label_upper_left
        "Upper Right" => label.style_label_upper_right
        "Plain Text" => label.style_none
        => acceptGivenIfNoMatch ? styleString : label.style_label_down
    ret

// @function Draw a label after the last bar. 
// @param show (bool) Should the label show or not?
// @param labelStyle (string) One of: label.style_label*
// @param x (int) Bar index on the x-axis
// @param y (float) Price on the y-axis
// @param labelText (string) Label text
// @param textSize (string) One of size.* values
// @param labelColor (color) Color of the label background
// @param textColor (color) Color of the text within the label. Defaults to color.white. This value will be inverted with the label color (and label color will become transparent) if labelStyle is None.
export drawLabel(bool show, string labelStyle, int x, float y, string labelText, string textSize, color labelColor, color textColor = color.white) =>
    var label lbl = na
    label.delete(lbl)
    if (show and labelStyle != "No Labels")
        // May need to shuffle the colors around depending on the label style being rendered
        _labelColor = labelColor
        _textColor = textColor
        _labelStyle = getLabelStyleFromString(labelStyle)
        if (_labelStyle == label.style_none)
            _labelColor := color.rgb(0,0,0,100) // Make the label background transparent
            _textColor := labelColor // Make the text the color of the label background

        lbl := label.new(x=x, y=y, text=labelText, style=_labelStyle, color=_labelColor, textcolor=_textColor, size=textSize, textalign=text.align_left)

// @function Draw a horizontal line.
// @param show (bool) Should the line and label show or not?
// @param x (int) Bar index on the x-axis
// @param y (float) Price on the y-axis
// @param lineStyle (string) One of line.style_*
// @param lineWidth (int) Width of the line
// @param lineColor (color) Color of the line
export drawLine(bool show, int x, float y, string lineStyle, int lineWidth, color lineColor) =>
    var line ln = na
    line.delete(ln)
    if (show)
        ln := line.new(x1=x[1], x2=x, y1=y, y2=y, extend=extend.both, color=lineColor, style=getLineStyleFromString(lineStyle), width=lineWidth)

// @function Draw a horizontal line with a label after the last bar. 
// @param show (bool) Should the line and label show or not?
// @param labelStyle (string) One of: label.style_label*
// @param x (int) Bar index on the x-axis
// @param y (float) Price on the y-axis
// @param lineStyle (string) One of line.style_*
// @param lineWidth (int) Width of the line
// @param lineAndLabelColor (color) Color of the line and label
// @param labelText (string) Label text
// @param textSize (string) One of size.* values
// @param textColor (color) Color of the text within the label. Defaults to color.white. This value will be inverted with the label color (and label color will become transparent) if labelPosition is one of the "Text Above" options.
export drawLineAndLabel(bool show, string labelStyle, int x, float y, string lineStyle, int lineWidth, color lineAndLabelColor, string labelText, string textSize, color textColor = color.white) =>
    drawLine(show, x, y, lineStyle, lineWidth, lineAndLabelColor)
    drawLabel(show, labelStyle, x, y, labelText, textSize, lineAndLabelColor, textColor)

// @function Write a debug message to the screen after the last candle
// @param txt (string) the message to write
export debug(string txt) =>
    drawLabel(true, label.style_label_left, bar_index + 3, ta.highest(10)[1], txt, size.normal, color.blue, color.white)

// @function Convenience function. I found that if I assigned a built-in series to a variable in the function scope, it didn't retain it's history. This function allows me to work around that.
// @param direction (string) "Up" or "Down"
// @param index (int) The index in the series to return 
// @returns (float) The high or low value
getHistoryValue(string direction, int index) =>
    ret = direction == 'Up' ? low[index] : high[index]
    ret

// @function Return a color with a transparency on it
// @param color (color) The color to make transparent
// @param transparency (int) The transparency value
// @returns (color) the color with transparency applied
export getTransparentColor(color color, int transparency) =>
   color.rgb(color.r(color), color.g(color), color.b(color), transparency)

// @function Determines if the current candle is going in the specified direction.
// @param direction (string) "Up" or "Down"
// @param index (int) The index in the series to check
// @returns (bool) True or false
export isLastCandleGoingInDirection(string direction, int index) =>
    movingInDirection = (direction == 'Up' and getHistoryValue(direction, index+1) <= getHistoryValue(direction, index)) or (direction == 'Down' and getHistoryValue(direction, index+1) >= getHistoryValue(direction, index))
    movingInDirection

// @function Determine if a stairstep is occurring within a specified # of candles. 
// @param direction (string) "Up" or "Down"
// @param length (int) The number of candles to check back from the current candle
// @returns (int) 0 if not stairstepping, -1 if a stairstep has just broken, 1+ indicates the number of candles it has been stairstepping for
export getStairstep(string direction, int length) => 
    breaking = isLastCandleGoingInDirection(direction, 0) ? false : true

    steps = 1
    curr = false
    i = steps
    while isLastCandleGoingInDirection(direction, i) and i < 40
        i := i + 1
        steps := steps + 1

    trending = steps >= length - 1
    ret = trending ? breaking ? -1 : steps + 1 : 0
    ret

// @function Gets the number of inside bars for the current chart. Can also be passed to request.security to get the same for different timeframes.
// @returns (int) The # of inside bars on the chart right now.
export getInsideBarCount() => 
    ibCount = 0
    i = 0
    maxLoops = 10
    while i <= maxLoops
        if (high[i+1] > high[i] and low[i+1] < low[i])
            ibCount := ibCount + 1
            i := i + 1
        else
            i := maxLoops + 1

    ibCount

// @function Given a start and end time, returns the high or low price during that time window.
// @param highOrLow A string "high" or "low" specifying which value you are looking for
// @param start The timestamp to start with (# of seconds)
// @param end The timestamp to end with (# of seconds)
// @returns (float) The high or low value
export getLevelBetweenTimes(string highOrLow, int start, int end) =>
    // ref: https://www.pinecoders.com/faq_and_code/
    var float ret = highOrLow == 'high' ? 0. : 10e10
    var reset = true
    minNow = (hour * 60) + minute
    if minNow >= start and minNow <= end
        if reset
            ret := highOrLow == 'high' ? high : low
            reset := false
        else
            ret := highOrLow == 'high' ? math.max(ret, high) : math.min(ret, low)
    else
        reset := true
    ret

// @function Get the # of seconds for the current chart's timeframe
// @returns (int) The integer value in seconds of that timeframe
export timeframeOfChartToInt() =>
    int rtf = 0
    if (timeframe.isseconds)
        rtf := timeframe.multiplier
    if (timeframe.isminutes)
        rtf := timeframe.multiplier * 60
    if (timeframe.isdaily)
        rtf := timeframe.multiplier * 60 * 60 * 24
    if (timeframe.isweekly)
        rtf := timeframe.multiplier * 60 * 60 * 24 * 7
    if (timeframe.ismonthly)
        rtf := timeframe.multiplier * 60 * 60 * 24 * 30
    rtf

// @function Get the timeframe of the current chart
// @returns (string) The string of the current chart timeframe
export timeframeOfChart() =>
    string rtf = str.tostring(timeframe.multiplier)
    if (timeframe.isseconds)
        rtf := rtf + "s"
    if (timeframe.isdaily)
        rtf := rtf + "d"
    if (timeframe.isweekly)
        rtf := rtf + "w"
    if (timeframe.ismonthly)
        rtf := rtf + "m"
    rtf

// @function Get the # of seconds in a given timeframe. Used for comparisons.
// @param tf timeframe
// @returns (int) The integer value in seconds of that timeframe
export timeframeToInt(string tf) =>
    int rtf = switch tf
    	"1" => 60
    	"2" => 120
    	"3" => 180
    	"5" => 300
    	"10" => 600
    	"13" => 780
    	"15" => 900
    	"30" => 1800
    	"45" => 2700
    	"60" => 3600
    	"120" => 7200
    	"180" => 10800
    	"240" => 14400
    	"360" => 21600
    	"480" => 28800
    	"720" => 43200
    	"1D" => 86400
    	"D" => 86400
    	"1W" => 604800
    	"W" => 604800
    	"1M" => 2592000
    	"M" => 2592000
    	=> 1 // default
    rtf

// @function Convert a timeframe string to a consistent standard.
// @param tf (string) The timeframe string to convert
// @returns (string) The standard format for the string, or the unchanged value if it is unknown.
export timeframeToString(string tf) =>
    string rtf = switch tf
    	"1" => "1m"
    	"2" => "2m"
    	"3" => "3m"
    	"5" => "5m"
    	"13" => "13m"
    	"15" => "15m"
    	"30" => "30m"
    	"45" => "45m"
    	"60" => "1h"
    	"120" => "2h"
    	"180" => "3h"
    	"240" => "4h"
    	"360" => "6h"
    	"480" => "8h"
    	"720" => "12h"
    	"D" => "1D"
    	"W" => "1W"
    	"M" => "1M"
    	=> tf // default
    rtf
